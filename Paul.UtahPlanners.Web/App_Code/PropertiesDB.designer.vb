'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace com.landonpoch.data
	
	<System.Data.Linq.Mapping.DatabaseAttribute(Name:="Properties2")>  _
	Partial Public Class PropertiesDBDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertAddress(instance As com.landonpoch.entities.Address)
    End Sub
    Partial Private Sub UpdateAddress(instance As com.landonpoch.entities.Address)
    End Sub
    Partial Private Sub DeleteAddress(instance As com.landonpoch.entities.Address)
    End Sub
    Partial Private Sub InsertStreetType(instance As com.landonpoch.entities.StreetType)
    End Sub
    Partial Private Sub UpdateStreetType(instance As com.landonpoch.entities.StreetType)
    End Sub
    Partial Private Sub DeleteStreetType(instance As com.landonpoch.entities.StreetType)
    End Sub
    Partial Private Sub InsertPicture(instance As com.landonpoch.entities.Picture)
    End Sub
    Partial Private Sub UpdatePicture(instance As com.landonpoch.entities.Picture)
    End Sub
    Partial Private Sub DeletePicture(instance As com.landonpoch.entities.Picture)
    End Sub
    Partial Private Sub InsertPropertyType(instance As com.landonpoch.entities.PropertyType)
    End Sub
    Partial Private Sub UpdatePropertyType(instance As com.landonpoch.entities.PropertyType)
    End Sub
    Partial Private Sub DeletePropertyType(instance As com.landonpoch.entities.PropertyType)
    End Sub
    Partial Private Sub InsertNeighborhoodCode(instance As com.landonpoch.entities.NeighborhoodCode)
    End Sub
    Partial Private Sub UpdateNeighborhoodCode(instance As com.landonpoch.entities.NeighborhoodCode)
    End Sub
    Partial Private Sub DeleteNeighborhoodCode(instance As com.landonpoch.entities.NeighborhoodCode)
    End Sub
    Partial Private Sub InsertSocioEconCode(instance As com.landonpoch.entities.SocioEconCode)
    End Sub
    Partial Private Sub UpdateSocioEconCode(instance As com.landonpoch.entities.SocioEconCode)
    End Sub
    Partial Private Sub DeleteSocioEconCode(instance As com.landonpoch.entities.SocioEconCode)
    End Sub
    Partial Private Sub InsertStreetconnCode(instance As com.landonpoch.entities.StreetconnCode)
    End Sub
    Partial Private Sub UpdateStreetconnCode(instance As com.landonpoch.entities.StreetconnCode)
    End Sub
    Partial Private Sub DeleteStreetconnCode(instance As com.landonpoch.entities.StreetconnCode)
    End Sub
    Partial Private Sub InsertStreetwalkCode(instance As com.landonpoch.entities.StreetwalkCode)
    End Sub
    Partial Private Sub UpdateStreetwalkCode(instance As com.landonpoch.entities.StreetwalkCode)
    End Sub
    Partial Private Sub DeleteStreetwalkCode(instance As com.landonpoch.entities.StreetwalkCode)
    End Sub
    Partial Private Sub InsertWeight(instance As com.landonpoch.entities.Weight)
    End Sub
    Partial Private Sub UpdateWeight(instance As com.landonpoch.entities.Weight)
    End Sub
    Partial Private Sub DeleteWeight(instance As com.landonpoch.entities.Weight)
    End Sub
    Partial Private Sub InsertCommonCode(instance As com.landonpoch.entities.CommonCode)
    End Sub
    Partial Private Sub UpdateCommonCode(instance As com.landonpoch.entities.CommonCode)
    End Sub
    Partial Private Sub DeleteCommonCode(instance As com.landonpoch.entities.CommonCode)
    End Sub
    Partial Private Sub InsertEnclosureCode(instance As com.landonpoch.entities.EnclosureCode)
    End Sub
    Partial Private Sub UpdateEnclosureCode(instance As com.landonpoch.entities.EnclosureCode)
    End Sub
    Partial Private Sub DeleteEnclosureCode(instance As com.landonpoch.entities.EnclosureCode)
    End Sub
    Partial Private Sub InsertStreetSafteyCode(instance As com.landonpoch.entities.StreetSafteyCode)
    End Sub
    Partial Private Sub UpdateStreetSafteyCode(instance As com.landonpoch.entities.StreetSafteyCode)
    End Sub
    Partial Private Sub DeleteStreetSafteyCode(instance As com.landonpoch.entities.StreetSafteyCode)
    End Sub
    Partial Private Sub InsertProperty(instance As com.landonpoch.entities.Property)
    End Sub
    Partial Private Sub UpdateProperty(instance As com.landonpoch.entities.Property)
    End Sub
    Partial Private Sub DeleteProperty(instance As com.landonpoch.entities.Property)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("Properties2ConnectionString").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Addresses() As System.Data.Linq.Table(Of com.landonpoch.entities.Address)
			Get
				Return Me.GetTable(Of com.landonpoch.entities.Address)
			End Get
		End Property
		
		Public ReadOnly Property StreetTypes() As System.Data.Linq.Table(Of com.landonpoch.entities.StreetType)
			Get
				Return Me.GetTable(Of com.landonpoch.entities.StreetType)
			End Get
		End Property
		
		Public ReadOnly Property Pictures() As System.Data.Linq.Table(Of com.landonpoch.entities.Picture)
			Get
				Return Me.GetTable(Of com.landonpoch.entities.Picture)
			End Get
		End Property
		
		Public ReadOnly Property PropertyTypes() As System.Data.Linq.Table(Of com.landonpoch.entities.PropertyType)
			Get
				Return Me.GetTable(Of com.landonpoch.entities.PropertyType)
			End Get
		End Property
		
		Public ReadOnly Property NeighborhoodCodes() As System.Data.Linq.Table(Of com.landonpoch.entities.NeighborhoodCode)
			Get
				Return Me.GetTable(Of com.landonpoch.entities.NeighborhoodCode)
			End Get
		End Property
		
		Public ReadOnly Property SocioEconCodes() As System.Data.Linq.Table(Of com.landonpoch.entities.SocioEconCode)
			Get
				Return Me.GetTable(Of com.landonpoch.entities.SocioEconCode)
			End Get
		End Property
		
		Public ReadOnly Property StreetconnCodes() As System.Data.Linq.Table(Of com.landonpoch.entities.StreetconnCode)
			Get
				Return Me.GetTable(Of com.landonpoch.entities.StreetconnCode)
			End Get
		End Property
		
		Public ReadOnly Property StreetwalkCodes() As System.Data.Linq.Table(Of com.landonpoch.entities.StreetwalkCode)
			Get
				Return Me.GetTable(Of com.landonpoch.entities.StreetwalkCode)
			End Get
		End Property
		
		Public ReadOnly Property Weights() As System.Data.Linq.Table(Of com.landonpoch.entities.Weight)
			Get
				Return Me.GetTable(Of com.landonpoch.entities.Weight)
			End Get
		End Property
		
		Public ReadOnly Property CommonCodes() As System.Data.Linq.Table(Of com.landonpoch.entities.CommonCode)
			Get
				Return Me.GetTable(Of com.landonpoch.entities.CommonCode)
			End Get
		End Property
		
		Public ReadOnly Property EnclosureCodes() As System.Data.Linq.Table(Of com.landonpoch.entities.EnclosureCode)
			Get
				Return Me.GetTable(Of com.landonpoch.entities.EnclosureCode)
			End Get
		End Property
		
		Public ReadOnly Property StreetSafteyCodes() As System.Data.Linq.Table(Of com.landonpoch.entities.StreetSafteyCode)
			Get
				Return Me.GetTable(Of com.landonpoch.entities.StreetSafteyCode)
			End Get
		End Property
		
		Public ReadOnly Property Properties() As System.Data.Linq.Table(Of com.landonpoch.entities.[Property])
			Get
				Return Me.GetTable(Of com.landonpoch.entities.[Property])
			End Get
		End Property
	End Class
End Namespace

Namespace com.landonpoch.entities
	
	<Table(Name:="dbo.Address")>  _
	Partial Public Class Address
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _street1 As String
		
		Private _street2 As String
		
		Private _city As String
		
		Private _state As String
		
		Private _zip As String
		
		Private _country As String
		
		Private _Property As EntityRef(Of [Property])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onstreet1Changing(value As String)
    End Sub
    Partial Private Sub Onstreet1Changed()
    End Sub
    Partial Private Sub Onstreet2Changing(value As String)
    End Sub
    Partial Private Sub Onstreet2Changed()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnstateChanging(value As String)
    End Sub
    Partial Private Sub OnstateChanged()
    End Sub
    Partial Private Sub OnzipChanging(value As String)
    End Sub
    Partial Private Sub OnzipChanged()
    End Sub
    Partial Private Sub OncountryChanging(value As String)
    End Sub
    Partial Private Sub OncountryChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Property = CType(Nothing, EntityRef(Of [Property]))
			OnCreated
		End Sub
		
		<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					If Me._Property.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_street1", DbType:="NVarChar(MAX)")>  _
		Public Property street1() As String
			Get
				Return Me._street1
			End Get
			Set
				If (String.Equals(Me._street1, value) = false) Then
					Me.Onstreet1Changing(value)
					Me.SendPropertyChanging
					Me._street1 = value
					Me.SendPropertyChanged("street1")
					Me.Onstreet1Changed
				End If
			End Set
		End Property
		
		<Column(Storage:="_street2", DbType:="NVarChar(MAX)")>  _
		Public Property street2() As String
			Get
				Return Me._street2
			End Get
			Set
				If (String.Equals(Me._street2, value) = false) Then
					Me.Onstreet2Changing(value)
					Me.SendPropertyChanging
					Me._street2 = value
					Me.SendPropertyChanged("street2")
					Me.Onstreet2Changed
				End If
			End Set
		End Property
		
		<Column(Storage:="_city", DbType:="NVarChar(MAX)")>  _
		Public Property city() As String
			Get
				Return Me._city
			End Get
			Set
				If (String.Equals(Me._city, value) = false) Then
					Me.OncityChanging(value)
					Me.SendPropertyChanging
					Me._city = value
					Me.SendPropertyChanged("city")
					Me.OncityChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_state", DbType:="NVarChar(MAX)")>  _
		Public Property state() As String
			Get
				Return Me._state
			End Get
			Set
				If (String.Equals(Me._state, value) = false) Then
					Me.OnstateChanging(value)
					Me.SendPropertyChanging
					Me._state = value
					Me.SendPropertyChanged("state")
					Me.OnstateChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_zip", DbType:="NVarChar(MAX)")>  _
		Public Property zip() As String
			Get
				Return Me._zip
			End Get
			Set
				If (String.Equals(Me._zip, value) = false) Then
					Me.OnzipChanging(value)
					Me.SendPropertyChanging
					Me._zip = value
					Me.SendPropertyChanged("zip")
					Me.OnzipChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_country", DbType:="NVarChar(MAX)")>  _
		Public Property country() As String
			Get
				Return Me._country
			End Get
			Set
				If (String.Equals(Me._country, value) = false) Then
					Me.OncountryChanging(value)
					Me.SendPropertyChanging
					Me._country = value
					Me.SendPropertyChanged("country")
					Me.OncountryChanged
				End If
			End Set
		End Property
		
		<Association(Name:="Property_Address", Storage:="_Property", ThisKey:="id", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property [Property]() As [Property]
			Get
				Return Me._Property.Entity
			End Get
			Set
				Dim previousValue As [Property] = Me._Property.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Property.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Property.Entity = Nothing
						previousValue.Address = Nothing
					End If
					Me._Property.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Address = Me
						Me._id = value.id
					Else
						Me._id = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("[Property]")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="dbo.StreetTypes")>  _
	Partial Public Class StreetType
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _description As String
		
		Private _Properties As EntitySet(Of [Property])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Properties = New EntitySet(Of [Property])(AddressOf Me.attach_Properties, AddressOf Me.detach_Properties)
			OnCreated
		End Sub
		
		<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_description", DbType:="NVarChar(MAX)")>  _
		Public Property description() As String
			Get
				Return Me._description
			End Get
			Set
				If (String.Equals(Me._description, value) = false) Then
					Me.OndescriptionChanging(value)
					Me.SendPropertyChanging
					Me._description = value
					Me.SendPropertyChanged("description")
					Me.OndescriptionChanged
				End If
			End Set
		End Property
		
		<Association(Name:="StreetType_Property", Storage:="_Properties", ThisKey:="id", OtherKey:="streetCode")>  _
		Public Property Properties() As EntitySet(Of [Property])
			Get
				Return Me._Properties
			End Get
			Set
				Me._Properties.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.StreetType = Me
		End Sub
		
		Private Sub detach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.StreetType = Nothing
		End Sub
	End Class
	
	<Table(Name:="dbo.Pictures")>  _
	Partial Public Class Picture
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _frontPage As System.Nullable(Of Short)
		
		Private _mainPicture As System.Nullable(Of Short)
		
		Private _secondaryPicture As System.Nullable(Of Short)
		
		Private _binaryData As System.Data.Linq.Binary
		
		Private _mimeType As String
		
		Private _property_id As System.Nullable(Of Integer)
		
		Private _Property As EntityRef(Of [Property])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnfrontPageChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnfrontPageChanged()
    End Sub
    Partial Private Sub OnmainPictureChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnmainPictureChanged()
    End Sub
    Partial Private Sub OnsecondaryPictureChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnsecondaryPictureChanged()
    End Sub
    Partial Private Sub OnbinaryDataChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnbinaryDataChanged()
    End Sub
    Partial Private Sub OnmimeTypeChanging(value As String)
    End Sub
    Partial Private Sub OnmimeTypeChanged()
    End Sub
    Partial Private Sub Onproperty_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onproperty_idChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Property = CType(Nothing, EntityRef(Of [Property]))
			OnCreated
		End Sub
		
		<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_frontPage", DbType:="SmallInt")>  _
		Public Property frontPage() As System.Nullable(Of Short)
			Get
				Return Me._frontPage
			End Get
			Set
				If (Me._frontPage.Equals(value) = false) Then
					Me.OnfrontPageChanging(value)
					Me.SendPropertyChanging
					Me._frontPage = value
					Me.SendPropertyChanged("frontPage")
					Me.OnfrontPageChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_mainPicture", DbType:="SmallInt")>  _
		Public Property mainPicture() As System.Nullable(Of Short)
			Get
				Return Me._mainPicture
			End Get
			Set
				If (Me._mainPicture.Equals(value) = false) Then
					Me.OnmainPictureChanging(value)
					Me.SendPropertyChanging
					Me._mainPicture = value
					Me.SendPropertyChanged("mainPicture")
					Me.OnmainPictureChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_secondaryPicture", DbType:="SmallInt")>  _
		Public Property secondaryPicture() As System.Nullable(Of Short)
			Get
				Return Me._secondaryPicture
			End Get
			Set
				If (Me._secondaryPicture.Equals(value) = false) Then
					Me.OnsecondaryPictureChanging(value)
					Me.SendPropertyChanging
					Me._secondaryPicture = value
					Me.SendPropertyChanged("secondaryPicture")
					Me.OnsecondaryPictureChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_binaryData", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property binaryData() As System.Data.Linq.Binary
			Get
				Return Me._binaryData
			End Get
			Set
				If (Object.Equals(Me._binaryData, value) = false) Then
					Me.OnbinaryDataChanging(value)
					Me.SendPropertyChanging
					Me._binaryData = value
					Me.SendPropertyChanged("binaryData")
					Me.OnbinaryDataChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_mimeType", DbType:="NVarChar(MAX)")>  _
		Public Property mimeType() As String
			Get
				Return Me._mimeType
			End Get
			Set
				If (String.Equals(Me._mimeType, value) = false) Then
					Me.OnmimeTypeChanging(value)
					Me.SendPropertyChanging
					Me._mimeType = value
					Me.SendPropertyChanged("mimeType")
					Me.OnmimeTypeChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_property_id", DbType:="Int")>  _
		Public Property property_id() As System.Nullable(Of Integer)
			Get
				Return Me._property_id
			End Get
			Set
				If (Me._property_id.Equals(value) = false) Then
					If Me._Property.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.Onproperty_idChanging(value)
					Me.SendPropertyChanging
					Me._property_id = value
					Me.SendPropertyChanged("property_id")
					Me.Onproperty_idChanged
				End If
			End Set
		End Property
		
		<Association(Name:="Property_Picture", Storage:="_Property", ThisKey:="property_id", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property [Property]() As [Property]
			Get
				Return Me._Property.Entity
			End Get
			Set
				Dim previousValue As [Property] = Me._Property.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Property.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Property.Entity = Nothing
						previousValue.Pictures.Remove(Me)
					End If
					Me._Property.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Pictures.Add(Me)
						Me._property_id = value.id
					Else
						Me._property_id = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("[Property]")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="dbo.PropertyTypes")>  _
	Partial Public Class PropertyType
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _description As String
		
		Private _Properties As EntitySet(Of [Property])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Properties = New EntitySet(Of [Property])(AddressOf Me.attach_Properties, AddressOf Me.detach_Properties)
			OnCreated
		End Sub
		
		<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_description", DbType:="NVarChar(MAX)")>  _
		Public Property description() As String
			Get
				Return Me._description
			End Get
			Set
				If (String.Equals(Me._description, value) = false) Then
					Me.OndescriptionChanging(value)
					Me.SendPropertyChanging
					Me._description = value
					Me.SendPropertyChanged("description")
					Me.OndescriptionChanged
				End If
			End Set
		End Property
		
		<Association(Name:="PropertyType_Property", Storage:="_Properties", ThisKey:="id", OtherKey:="typeCode")>  _
		Public Property Properties() As EntitySet(Of [Property])
			Get
				Return Me._Properties
			End Get
			Set
				Me._Properties.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.PropertyType = Me
		End Sub
		
		Private Sub detach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.PropertyType = Nothing
		End Sub
	End Class
	
	<Table(Name:="dbo.NeighborhoodCodes")>  _
	Partial Public Class NeighborhoodCode
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _description As String
		
		Private _weight As System.Nullable(Of Integer)
		
		Private _Properties As EntitySet(Of [Property])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnweightChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnweightChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Properties = New EntitySet(Of [Property])(AddressOf Me.attach_Properties, AddressOf Me.detach_Properties)
			OnCreated
		End Sub
		
		<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_description", DbType:="NVarChar(MAX)")>  _
		Public Property description() As String
			Get
				Return Me._description
			End Get
			Set
				If (String.Equals(Me._description, value) = false) Then
					Me.OndescriptionChanging(value)
					Me.SendPropertyChanging
					Me._description = value
					Me.SendPropertyChanged("description")
					Me.OndescriptionChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_weight", DbType:="Int")>  _
		Public Property weight() As System.Nullable(Of Integer)
			Get
				Return Me._weight
			End Get
			Set
				If (Me._weight.Equals(value) = false) Then
					Me.OnweightChanging(value)
					Me.SendPropertyChanging
					Me._weight = value
					Me.SendPropertyChanged("weight")
					Me.OnweightChanged
				End If
			End Set
		End Property
		
		<Association(Name:="NeighborhoodCode_Property", Storage:="_Properties", ThisKey:="id", OtherKey:="neighCondition")>  _
		Public Property Properties() As EntitySet(Of [Property])
			Get
				Return Me._Properties
			End Get
			Set
				Me._Properties.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.NeighborhoodCode = Me
		End Sub
		
		Private Sub detach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.NeighborhoodCode = Nothing
		End Sub
	End Class
	
	<Table(Name:="dbo.SocioEconCodes")>  _
	Partial Public Class SocioEconCode
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _description As String
		
		Private _Properties As EntitySet(Of [Property])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Properties = New EntitySet(Of [Property])(AddressOf Me.attach_Properties, AddressOf Me.detach_Properties)
			OnCreated
		End Sub
		
		<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_description", DbType:="NVarChar(MAX)")>  _
		Public Property description() As String
			Get
				Return Me._description
			End Get
			Set
				If (String.Equals(Me._description, value) = false) Then
					Me.OndescriptionChanging(value)
					Me.SendPropertyChanging
					Me._description = value
					Me.SendPropertyChanged("description")
					Me.OndescriptionChanged
				End If
			End Set
		End Property
		
		<Association(Name:="SocioEconCode_Property", Storage:="_Properties", ThisKey:="id", OtherKey:="socioEcon")>  _
		Public Property Properties() As EntitySet(Of [Property])
			Get
				Return Me._Properties
			End Get
			Set
				Me._Properties.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.SocioEconCode = Me
		End Sub
		
		Private Sub detach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.SocioEconCode = Nothing
		End Sub
	End Class
	
	<Table(Name:="dbo.StreetconnCodes")>  _
	Partial Public Class StreetconnCode
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _description As String
		
		Private _weight As System.Nullable(Of Integer)
		
		Private _Properties As EntitySet(Of [Property])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnweightChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnweightChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Properties = New EntitySet(Of [Property])(AddressOf Me.attach_Properties, AddressOf Me.detach_Properties)
			OnCreated
		End Sub
		
		<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_description", DbType:="NVarChar(MAX)")>  _
		Public Property description() As String
			Get
				Return Me._description
			End Get
			Set
				If (String.Equals(Me._description, value) = false) Then
					Me.OndescriptionChanging(value)
					Me.SendPropertyChanging
					Me._description = value
					Me.SendPropertyChanged("description")
					Me.OndescriptionChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_weight", DbType:="Int")>  _
		Public Property weight() As System.Nullable(Of Integer)
			Get
				Return Me._weight
			End Get
			Set
				If (Me._weight.Equals(value) = false) Then
					Me.OnweightChanging(value)
					Me.SendPropertyChanging
					Me._weight = value
					Me.SendPropertyChanged("weight")
					Me.OnweightChanged
				End If
			End Set
		End Property
		
		<Association(Name:="StreetconnCode_Property", Storage:="_Properties", ThisKey:="id", OtherKey:="streetConn")>  _
		Public Property Properties() As EntitySet(Of [Property])
			Get
				Return Me._Properties
			End Get
			Set
				Me._Properties.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.StreetconnCode = Me
		End Sub
		
		Private Sub detach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.StreetconnCode = Nothing
		End Sub
	End Class
	
	<Table(Name:="dbo.StreetwalkCodes")>  _
	Partial Public Class StreetwalkCode
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _description As String
		
		Private _weight As System.Nullable(Of Integer)
		
		Private _Properties As EntitySet(Of [Property])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnweightChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnweightChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Properties = New EntitySet(Of [Property])(AddressOf Me.attach_Properties, AddressOf Me.detach_Properties)
			OnCreated
		End Sub
		
		<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_description", DbType:="NVarChar(MAX)")>  _
		Public Property description() As String
			Get
				Return Me._description
			End Get
			Set
				If (String.Equals(Me._description, value) = false) Then
					Me.OndescriptionChanging(value)
					Me.SendPropertyChanging
					Me._description = value
					Me.SendPropertyChanged("description")
					Me.OndescriptionChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_weight", DbType:="Int")>  _
		Public Property weight() As System.Nullable(Of Integer)
			Get
				Return Me._weight
			End Get
			Set
				If (Me._weight.Equals(value) = false) Then
					Me.OnweightChanging(value)
					Me.SendPropertyChanging
					Me._weight = value
					Me.SendPropertyChanged("weight")
					Me.OnweightChanged
				End If
			End Set
		End Property
		
		<Association(Name:="StreetwalkCode_Property", Storage:="_Properties", ThisKey:="id", OtherKey:="streetWalk")>  _
		Public Property Properties() As EntitySet(Of [Property])
			Get
				Return Me._Properties
			End Get
			Set
				Me._Properties.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.StreetwalkCode = Me
		End Sub
		
		Private Sub detach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.StreetwalkCode = Nothing
		End Sub
	End Class
	
	<Table(Name:="dbo.Weights")>  _
	Partial Public Class Weight
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _streetWalk As System.Nullable(Of Integer)
		
		Private _walkscore As System.Nullable(Of Integer)
		
		Private _twoFiftySingleFam As System.Nullable(Of Integer)
		
		Private _buildingEnclosure As System.Nullable(Of Integer)
		
		Private _streetConn As System.Nullable(Of Integer)
		
		Private _commonAreas As System.Nullable(Of Integer)
		
		Private _streetSaftey As System.Nullable(Of Integer)
		
		Private _neighCondition As System.Nullable(Of Integer)
		
		Private _twoFiftyApts As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnstreetWalkChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstreetWalkChanged()
    End Sub
    Partial Private Sub OnwalkscoreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnwalkscoreChanged()
    End Sub
    Partial Private Sub OntwoFiftySingleFamChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntwoFiftySingleFamChanged()
    End Sub
    Partial Private Sub OnbuildingEnclosureChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbuildingEnclosureChanged()
    End Sub
    Partial Private Sub OnstreetConnChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstreetConnChanged()
    End Sub
    Partial Private Sub OncommonAreasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncommonAreasChanged()
    End Sub
    Partial Private Sub OnstreetSafteyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstreetSafteyChanged()
    End Sub
    Partial Private Sub OnneighConditionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnneighConditionChanged()
    End Sub
    Partial Private Sub OntwoFiftyAptsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntwoFiftyAptsChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_streetWalk", DbType:="Int")>  _
		Public Property streetWalk() As System.Nullable(Of Integer)
			Get
				Return Me._streetWalk
			End Get
			Set
				If (Me._streetWalk.Equals(value) = false) Then
					Me.OnstreetWalkChanging(value)
					Me.SendPropertyChanging
					Me._streetWalk = value
					Me.SendPropertyChanged("streetWalk")
					Me.OnstreetWalkChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_walkscore", DbType:="Int")>  _
		Public Property walkscore() As System.Nullable(Of Integer)
			Get
				Return Me._walkscore
			End Get
			Set
				If (Me._walkscore.Equals(value) = false) Then
					Me.OnwalkscoreChanging(value)
					Me.SendPropertyChanging
					Me._walkscore = value
					Me.SendPropertyChanged("walkscore")
					Me.OnwalkscoreChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_twoFiftySingleFam", DbType:="Int")>  _
		Public Property twoFiftySingleFam() As System.Nullable(Of Integer)
			Get
				Return Me._twoFiftySingleFam
			End Get
			Set
				If (Me._twoFiftySingleFam.Equals(value) = false) Then
					Me.OntwoFiftySingleFamChanging(value)
					Me.SendPropertyChanging
					Me._twoFiftySingleFam = value
					Me.SendPropertyChanged("twoFiftySingleFam")
					Me.OntwoFiftySingleFamChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_buildingEnclosure", DbType:="Int")>  _
		Public Property buildingEnclosure() As System.Nullable(Of Integer)
			Get
				Return Me._buildingEnclosure
			End Get
			Set
				If (Me._buildingEnclosure.Equals(value) = false) Then
					Me.OnbuildingEnclosureChanging(value)
					Me.SendPropertyChanging
					Me._buildingEnclosure = value
					Me.SendPropertyChanged("buildingEnclosure")
					Me.OnbuildingEnclosureChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_streetConn", DbType:="Int")>  _
		Public Property streetConn() As System.Nullable(Of Integer)
			Get
				Return Me._streetConn
			End Get
			Set
				If (Me._streetConn.Equals(value) = false) Then
					Me.OnstreetConnChanging(value)
					Me.SendPropertyChanging
					Me._streetConn = value
					Me.SendPropertyChanged("streetConn")
					Me.OnstreetConnChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_commonAreas", DbType:="Int")>  _
		Public Property commonAreas() As System.Nullable(Of Integer)
			Get
				Return Me._commonAreas
			End Get
			Set
				If (Me._commonAreas.Equals(value) = false) Then
					Me.OncommonAreasChanging(value)
					Me.SendPropertyChanging
					Me._commonAreas = value
					Me.SendPropertyChanged("commonAreas")
					Me.OncommonAreasChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_streetSaftey", DbType:="Int")>  _
		Public Property streetSaftey() As System.Nullable(Of Integer)
			Get
				Return Me._streetSaftey
			End Get
			Set
				If (Me._streetSaftey.Equals(value) = false) Then
					Me.OnstreetSafteyChanging(value)
					Me.SendPropertyChanging
					Me._streetSaftey = value
					Me.SendPropertyChanged("streetSaftey")
					Me.OnstreetSafteyChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_neighCondition", DbType:="Int")>  _
		Public Property neighCondition() As System.Nullable(Of Integer)
			Get
				Return Me._neighCondition
			End Get
			Set
				If (Me._neighCondition.Equals(value) = false) Then
					Me.OnneighConditionChanging(value)
					Me.SendPropertyChanging
					Me._neighCondition = value
					Me.SendPropertyChanged("neighCondition")
					Me.OnneighConditionChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_twoFiftyApts", DbType:="Int")>  _
		Public Property twoFiftyApts() As System.Nullable(Of Integer)
			Get
				Return Me._twoFiftyApts
			End Get
			Set
				If (Me._twoFiftyApts.Equals(value) = false) Then
					Me.OntwoFiftyAptsChanging(value)
					Me.SendPropertyChanging
					Me._twoFiftyApts = value
					Me.SendPropertyChanged("twoFiftyApts")
					Me.OntwoFiftyAptsChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="dbo.CommonCodes")>  _
	Partial Public Class CommonCode
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _description As String
		
		Private _weight As System.Nullable(Of Integer)
		
		Private _Properties As EntitySet(Of [Property])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnweightChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnweightChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Properties = New EntitySet(Of [Property])(AddressOf Me.attach_Properties, AddressOf Me.detach_Properties)
			OnCreated
		End Sub
		
		<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_description", DbType:="NVarChar(MAX)")>  _
		Public Property description() As String
			Get
				Return Me._description
			End Get
			Set
				If (String.Equals(Me._description, value) = false) Then
					Me.OndescriptionChanging(value)
					Me.SendPropertyChanging
					Me._description = value
					Me.SendPropertyChanged("description")
					Me.OndescriptionChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_weight", DbType:="Int")>  _
		Public Property weight() As System.Nullable(Of Integer)
			Get
				Return Me._weight
			End Get
			Set
				If (Me._weight.Equals(value) = false) Then
					Me.OnweightChanging(value)
					Me.SendPropertyChanging
					Me._weight = value
					Me.SendPropertyChanged("weight")
					Me.OnweightChanged
				End If
			End Set
		End Property
		
		<Association(Name:="CommonCode_Property", Storage:="_Properties", ThisKey:="id", OtherKey:="commonAreas")>  _
		Public Property Properties() As EntitySet(Of [Property])
			Get
				Return Me._Properties
			End Get
			Set
				Me._Properties.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.CommonCode = Me
		End Sub
		
		Private Sub detach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.CommonCode = Nothing
		End Sub
	End Class
	
	<Table(Name:="dbo.EnclosureCodes")>  _
	Partial Public Class EnclosureCode
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _description As String
		
		Private _weight As System.Nullable(Of Integer)
		
		Private _Properties As EntitySet(Of [Property])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnweightChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnweightChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Properties = New EntitySet(Of [Property])(AddressOf Me.attach_Properties, AddressOf Me.detach_Properties)
			OnCreated
		End Sub
		
		<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_description", DbType:="NVarChar(MAX)")>  _
		Public Property description() As String
			Get
				Return Me._description
			End Get
			Set
				If (String.Equals(Me._description, value) = false) Then
					Me.OndescriptionChanging(value)
					Me.SendPropertyChanging
					Me._description = value
					Me.SendPropertyChanged("description")
					Me.OndescriptionChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_weight", DbType:="Int")>  _
		Public Property weight() As System.Nullable(Of Integer)
			Get
				Return Me._weight
			End Get
			Set
				If (Me._weight.Equals(value) = false) Then
					Me.OnweightChanging(value)
					Me.SendPropertyChanging
					Me._weight = value
					Me.SendPropertyChanged("weight")
					Me.OnweightChanged
				End If
			End Set
		End Property
		
		<Association(Name:="EnclosureCode_Property", Storage:="_Properties", ThisKey:="id", OtherKey:="buildingEnclosure")>  _
		Public Property Properties() As EntitySet(Of [Property])
			Get
				Return Me._Properties
			End Get
			Set
				Me._Properties.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.EnclosureCode = Me
		End Sub
		
		Private Sub detach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.EnclosureCode = Nothing
		End Sub
	End Class
	
	<Table(Name:="dbo.StreetSafteyCodes")>  _
	Partial Public Class StreetSafteyCode
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _description As String
		
		Private _weight As System.Nullable(Of Integer)
		
		Private _Properties As EntitySet(Of [Property])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnweightChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnweightChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Properties = New EntitySet(Of [Property])(AddressOf Me.attach_Properties, AddressOf Me.detach_Properties)
			OnCreated
		End Sub
		
		<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_description", DbType:="NVarChar(MAX)")>  _
		Public Property description() As String
			Get
				Return Me._description
			End Get
			Set
				If (String.Equals(Me._description, value) = false) Then
					Me.OndescriptionChanging(value)
					Me.SendPropertyChanging
					Me._description = value
					Me.SendPropertyChanged("description")
					Me.OndescriptionChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_weight", DbType:="Int")>  _
		Public Property weight() As System.Nullable(Of Integer)
			Get
				Return Me._weight
			End Get
			Set
				If (Me._weight.Equals(value) = false) Then
					Me.OnweightChanging(value)
					Me.SendPropertyChanging
					Me._weight = value
					Me.SendPropertyChanged("weight")
					Me.OnweightChanged
				End If
			End Set
		End Property
		
		<Association(Name:="StreetSafteyCode_Property", Storage:="_Properties", ThisKey:="id", OtherKey:="streetSaftey")>  _
		Public Property Properties() As EntitySet(Of [Property])
			Get
				Return Me._Properties
			End Get
			Set
				Me._Properties.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.StreetSafteyCode = Me
		End Sub
		
		Private Sub detach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.StreetSafteyCode = Nothing
		End Sub
	End Class
	
	<Table(Name:="dbo.Properties")>  _
	Partial Public Class [Property]
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _typeCode As System.Nullable(Of Integer)
		
		Private _density As System.Nullable(Of Double)
		
		Private _area As System.Nullable(Of Integer)
		
		Private _units As System.Nullable(Of Integer)
		
		Private _streetCode As System.Nullable(Of Integer)
		
		Private _yearBuilt As System.Nullable(Of Integer)
		
		Private _socioEcon As System.Nullable(Of Integer)
		
		Private _streetSaftey As System.Nullable(Of Integer)
		
		Private _buildingEnclosure As System.Nullable(Of Integer)
		
		Private _commonAreas As System.Nullable(Of Integer)
		
		Private _streetConn As System.Nullable(Of Integer)
		
		Private _streetWalk As System.Nullable(Of Integer)
		
		Private _walkscore As System.Nullable(Of Integer)
		
		Private _neighCondition As System.Nullable(Of Integer)
		
		Private _twoFiftySingleFam As System.Nullable(Of Integer)
		
		Private _twoFiftyApts As System.Nullable(Of Integer)
		
		Private _notes As String
		
		Private _adminNotes As String
		
		Private _walkscoreNotes As String
		
		Private _notFinished As String
		
		Private _latitude As System.Nullable(Of Double)
		
		Private _longitude As System.Nullable(Of Double)
		
		Private _Address As EntityRef(Of Address)
		
		Private _Pictures As EntitySet(Of Picture)
		
		Private _EnclosureCode As EntityRef(Of EnclosureCode)
		
		Private _CommonCode As EntityRef(Of CommonCode)
		
		Private _NeighborhoodCode As EntityRef(Of NeighborhoodCode)
		
		Private _PropertyType As EntityRef(Of PropertyType)
		
		Private _StreetType As EntityRef(Of StreetType)
		
		Private _SocioEconCode As EntityRef(Of SocioEconCode)
		
		Private _StreetconnCode As EntityRef(Of StreetconnCode)
		
		Private _StreetSafteyCode As EntityRef(Of StreetSafteyCode)
		
		Private _StreetwalkCode As EntityRef(Of StreetwalkCode)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OntypeCodeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntypeCodeChanged()
    End Sub
    Partial Private Sub OndensityChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OndensityChanged()
    End Sub
    Partial Private Sub OnareaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnareaChanged()
    End Sub
    Partial Private Sub OnunitsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnunitsChanged()
    End Sub
    Partial Private Sub OnstreetCodeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstreetCodeChanged()
    End Sub
    Partial Private Sub OnyearBuiltChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnyearBuiltChanged()
    End Sub
    Partial Private Sub OnsocioEconChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsocioEconChanged()
    End Sub
    Partial Private Sub OnstreetSafteyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstreetSafteyChanged()
    End Sub
    Partial Private Sub OnbuildingEnclosureChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbuildingEnclosureChanged()
    End Sub
    Partial Private Sub OncommonAreasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncommonAreasChanged()
    End Sub
    Partial Private Sub OnstreetConnChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstreetConnChanged()
    End Sub
    Partial Private Sub OnstreetWalkChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstreetWalkChanged()
    End Sub
    Partial Private Sub OnwalkscoreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnwalkscoreChanged()
    End Sub
    Partial Private Sub OnneighConditionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnneighConditionChanged()
    End Sub
    Partial Private Sub OntwoFiftySingleFamChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntwoFiftySingleFamChanged()
    End Sub
    Partial Private Sub OntwoFiftyAptsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntwoFiftyAptsChanged()
    End Sub
    Partial Private Sub OnnotesChanging(value As String)
    End Sub
    Partial Private Sub OnnotesChanged()
    End Sub
    Partial Private Sub OnadminNotesChanging(value As String)
    End Sub
    Partial Private Sub OnadminNotesChanged()
    End Sub
    Partial Private Sub OnwalkscoreNotesChanging(value As String)
    End Sub
    Partial Private Sub OnwalkscoreNotesChanged()
    End Sub
    Partial Private Sub OnnotFinishedChanging(value As String)
    End Sub
    Partial Private Sub OnnotFinishedChanged()
    End Sub
    Partial Private Sub OnlatitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlatitudeChanged()
    End Sub
    Partial Private Sub OnlongitudeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnlongitudeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Address = CType(Nothing, EntityRef(Of Address))
			Me._Pictures = New EntitySet(Of Picture)(AddressOf Me.attach_Pictures, AddressOf Me.detach_Pictures)
			Me._EnclosureCode = CType(Nothing, EntityRef(Of EnclosureCode))
			Me._CommonCode = CType(Nothing, EntityRef(Of CommonCode))
			Me._NeighborhoodCode = CType(Nothing, EntityRef(Of NeighborhoodCode))
			Me._PropertyType = CType(Nothing, EntityRef(Of PropertyType))
			Me._StreetType = CType(Nothing, EntityRef(Of StreetType))
			Me._SocioEconCode = CType(Nothing, EntityRef(Of SocioEconCode))
			Me._StreetconnCode = CType(Nothing, EntityRef(Of StreetconnCode))
			Me._StreetSafteyCode = CType(Nothing, EntityRef(Of StreetSafteyCode))
			Me._StreetwalkCode = CType(Nothing, EntityRef(Of StreetwalkCode))
			OnCreated
		End Sub
		
		<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_typeCode", DbType:="Int")>  _
		Public Property typeCode() As System.Nullable(Of Integer)
			Get
				Return Me._typeCode
			End Get
			Set
				If (Me._typeCode.Equals(value) = false) Then
					If Me._PropertyType.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OntypeCodeChanging(value)
					Me.SendPropertyChanging
					Me._typeCode = value
					Me.SendPropertyChanged("typeCode")
					Me.OntypeCodeChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_density", DbType:="Float")>  _
		Public Property density() As System.Nullable(Of Double)
			Get
				Return Me._density
			End Get
			Set
				If (Me._density.Equals(value) = false) Then
					Me.OndensityChanging(value)
					Me.SendPropertyChanging
					Me._density = value
					Me.SendPropertyChanged("density")
					Me.OndensityChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_area", DbType:="Int")>  _
		Public Property area() As System.Nullable(Of Integer)
			Get
				Return Me._area
			End Get
			Set
				If (Me._area.Equals(value) = false) Then
					Me.OnareaChanging(value)
					Me.SendPropertyChanging
					Me._area = value
					Me.SendPropertyChanged("area")
					Me.OnareaChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_units", DbType:="Int")>  _
		Public Property units() As System.Nullable(Of Integer)
			Get
				Return Me._units
			End Get
			Set
				If (Me._units.Equals(value) = false) Then
					Me.OnunitsChanging(value)
					Me.SendPropertyChanging
					Me._units = value
					Me.SendPropertyChanged("units")
					Me.OnunitsChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_streetCode", DbType:="Int")>  _
		Public Property streetCode() As System.Nullable(Of Integer)
			Get
				Return Me._streetCode
			End Get
			Set
				If (Me._streetCode.Equals(value) = false) Then
					If Me._StreetType.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnstreetCodeChanging(value)
					Me.SendPropertyChanging
					Me._streetCode = value
					Me.SendPropertyChanged("streetCode")
					Me.OnstreetCodeChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_yearBuilt", DbType:="Int")>  _
		Public Property yearBuilt() As System.Nullable(Of Integer)
			Get
				Return Me._yearBuilt
			End Get
			Set
				If (Me._yearBuilt.Equals(value) = false) Then
					Me.OnyearBuiltChanging(value)
					Me.SendPropertyChanging
					Me._yearBuilt = value
					Me.SendPropertyChanged("yearBuilt")
					Me.OnyearBuiltChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_socioEcon", DbType:="Int")>  _
		Public Property socioEcon() As System.Nullable(Of Integer)
			Get
				Return Me._socioEcon
			End Get
			Set
				If (Me._socioEcon.Equals(value) = false) Then
					If Me._SocioEconCode.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnsocioEconChanging(value)
					Me.SendPropertyChanging
					Me._socioEcon = value
					Me.SendPropertyChanged("socioEcon")
					Me.OnsocioEconChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_streetSaftey", DbType:="Int")>  _
		Public Property streetSaftey() As System.Nullable(Of Integer)
			Get
				Return Me._streetSaftey
			End Get
			Set
				If (Me._streetSaftey.Equals(value) = false) Then
					If Me._StreetSafteyCode.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnstreetSafteyChanging(value)
					Me.SendPropertyChanging
					Me._streetSaftey = value
					Me.SendPropertyChanged("streetSaftey")
					Me.OnstreetSafteyChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_buildingEnclosure", DbType:="Int")>  _
		Public Property buildingEnclosure() As System.Nullable(Of Integer)
			Get
				Return Me._buildingEnclosure
			End Get
			Set
				If (Me._buildingEnclosure.Equals(value) = false) Then
					If Me._EnclosureCode.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnbuildingEnclosureChanging(value)
					Me.SendPropertyChanging
					Me._buildingEnclosure = value
					Me.SendPropertyChanged("buildingEnclosure")
					Me.OnbuildingEnclosureChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_commonAreas", DbType:="Int")>  _
		Public Property commonAreas() As System.Nullable(Of Integer)
			Get
				Return Me._commonAreas
			End Get
			Set
				If (Me._commonAreas.Equals(value) = false) Then
					If Me._CommonCode.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OncommonAreasChanging(value)
					Me.SendPropertyChanging
					Me._commonAreas = value
					Me.SendPropertyChanged("commonAreas")
					Me.OncommonAreasChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_streetConn", DbType:="Int")>  _
		Public Property streetConn() As System.Nullable(Of Integer)
			Get
				Return Me._streetConn
			End Get
			Set
				If (Me._streetConn.Equals(value) = false) Then
					If Me._StreetconnCode.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnstreetConnChanging(value)
					Me.SendPropertyChanging
					Me._streetConn = value
					Me.SendPropertyChanged("streetConn")
					Me.OnstreetConnChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_streetWalk", DbType:="Int")>  _
		Public Property streetWalk() As System.Nullable(Of Integer)
			Get
				Return Me._streetWalk
			End Get
			Set
				If (Me._streetWalk.Equals(value) = false) Then
					If Me._StreetwalkCode.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnstreetWalkChanging(value)
					Me.SendPropertyChanging
					Me._streetWalk = value
					Me.SendPropertyChanged("streetWalk")
					Me.OnstreetWalkChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_walkscore", DbType:="Int")>  _
		Public Property walkscore() As System.Nullable(Of Integer)
			Get
				Return Me._walkscore
			End Get
			Set
				If (Me._walkscore.Equals(value) = false) Then
					Me.OnwalkscoreChanging(value)
					Me.SendPropertyChanging
					Me._walkscore = value
					Me.SendPropertyChanged("walkscore")
					Me.OnwalkscoreChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_neighCondition", DbType:="Int")>  _
		Public Property neighCondition() As System.Nullable(Of Integer)
			Get
				Return Me._neighCondition
			End Get
			Set
				If (Me._neighCondition.Equals(value) = false) Then
					If Me._NeighborhoodCode.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnneighConditionChanging(value)
					Me.SendPropertyChanging
					Me._neighCondition = value
					Me.SendPropertyChanged("neighCondition")
					Me.OnneighConditionChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_twoFiftySingleFam", DbType:="Int")>  _
		Public Property twoFiftySingleFam() As System.Nullable(Of Integer)
			Get
				Return Me._twoFiftySingleFam
			End Get
			Set
				If (Me._twoFiftySingleFam.Equals(value) = false) Then
					Me.OntwoFiftySingleFamChanging(value)
					Me.SendPropertyChanging
					Me._twoFiftySingleFam = value
					Me.SendPropertyChanged("twoFiftySingleFam")
					Me.OntwoFiftySingleFamChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_twoFiftyApts", DbType:="Int")>  _
		Public Property twoFiftyApts() As System.Nullable(Of Integer)
			Get
				Return Me._twoFiftyApts
			End Get
			Set
				If (Me._twoFiftyApts.Equals(value) = false) Then
					Me.OntwoFiftyAptsChanging(value)
					Me.SendPropertyChanging
					Me._twoFiftyApts = value
					Me.SendPropertyChanged("twoFiftyApts")
					Me.OntwoFiftyAptsChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_notes", DbType:="NVarChar(MAX)")>  _
		Public Property notes() As String
			Get
				Return Me._notes
			End Get
			Set
				If (String.Equals(Me._notes, value) = false) Then
					Me.OnnotesChanging(value)
					Me.SendPropertyChanging
					Me._notes = value
					Me.SendPropertyChanged("notes")
					Me.OnnotesChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_adminNotes", DbType:="NVarChar(MAX)")>  _
		Public Property adminNotes() As String
			Get
				Return Me._adminNotes
			End Get
			Set
				If (String.Equals(Me._adminNotes, value) = false) Then
					Me.OnadminNotesChanging(value)
					Me.SendPropertyChanging
					Me._adminNotes = value
					Me.SendPropertyChanged("adminNotes")
					Me.OnadminNotesChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_walkscoreNotes", DbType:="NVarChar(MAX)")>  _
		Public Property walkscoreNotes() As String
			Get
				Return Me._walkscoreNotes
			End Get
			Set
				If (String.Equals(Me._walkscoreNotes, value) = false) Then
					Me.OnwalkscoreNotesChanging(value)
					Me.SendPropertyChanging
					Me._walkscoreNotes = value
					Me.SendPropertyChanged("walkscoreNotes")
					Me.OnwalkscoreNotesChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_notFinished", DbType:="NVarChar(MAX)")>  _
		Public Property notFinished() As String
			Get
				Return Me._notFinished
			End Get
			Set
				If (String.Equals(Me._notFinished, value) = false) Then
					Me.OnnotFinishedChanging(value)
					Me.SendPropertyChanging
					Me._notFinished = value
					Me.SendPropertyChanged("notFinished")
					Me.OnnotFinishedChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_latitude", DbType:="Float")>  _
		Public Property latitude() As System.Nullable(Of Double)
			Get
				Return Me._latitude
			End Get
			Set
				If (Me._latitude.Equals(value) = false) Then
					Me.OnlatitudeChanging(value)
					Me.SendPropertyChanging
					Me._latitude = value
					Me.SendPropertyChanged("latitude")
					Me.OnlatitudeChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_longitude", DbType:="Float")>  _
		Public Property longitude() As System.Nullable(Of Double)
			Get
				Return Me._longitude
			End Get
			Set
				If (Me._longitude.Equals(value) = false) Then
					Me.OnlongitudeChanging(value)
					Me.SendPropertyChanging
					Me._longitude = value
					Me.SendPropertyChanged("longitude")
					Me.OnlongitudeChanged
				End If
			End Set
		End Property
		
		<Association(Name:="Property_Address", Storage:="_Address", ThisKey:="id", OtherKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
		Public Property Address() As Address
			Get
				Return Me._Address.Entity
			End Get
			Set
				Dim previousValue As Address = Me._Address.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Address.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Address.Entity = Nothing
						previousValue.[Property] = Nothing
					End If
					Me._Address.Entity = value
					If (Object.Equals(value, Nothing) = false) Then
						value.[Property] = Me
					End If
					Me.SendPropertyChanged("Address")
				End If
			End Set
		End Property
		
		<Association(Name:="Property_Picture", Storage:="_Pictures", ThisKey:="id", OtherKey:="property_id")>  _
		Public Property Pictures() As EntitySet(Of Picture)
			Get
				Return Me._Pictures
			End Get
			Set
				Me._Pictures.Assign(value)
			End Set
		End Property
		
		<Association(Name:="EnclosureCode_Property", Storage:="_EnclosureCode", ThisKey:="buildingEnclosure", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property EnclosureCode() As EnclosureCode
			Get
				Return Me._EnclosureCode.Entity
			End Get
			Set
				Dim previousValue As EnclosureCode = Me._EnclosureCode.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._EnclosureCode.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._EnclosureCode.Entity = Nothing
						previousValue.Properties.Remove(Me)
					End If
					Me._EnclosureCode.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Properties.Add(Me)
						Me._buildingEnclosure = value.id
					Else
						Me._buildingEnclosure = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("EnclosureCode")
				End If
			End Set
		End Property
		
		<Association(Name:="CommonCode_Property", Storage:="_CommonCode", ThisKey:="commonAreas", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property CommonCode() As CommonCode
			Get
				Return Me._CommonCode.Entity
			End Get
			Set
				Dim previousValue As CommonCode = Me._CommonCode.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._CommonCode.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._CommonCode.Entity = Nothing
						previousValue.Properties.Remove(Me)
					End If
					Me._CommonCode.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Properties.Add(Me)
						Me._commonAreas = value.id
					Else
						Me._commonAreas = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("CommonCode")
				End If
			End Set
		End Property
		
		<Association(Name:="NeighborhoodCode_Property", Storage:="_NeighborhoodCode", ThisKey:="neighCondition", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property NeighborhoodCode() As NeighborhoodCode
			Get
				Return Me._NeighborhoodCode.Entity
			End Get
			Set
				Dim previousValue As NeighborhoodCode = Me._NeighborhoodCode.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._NeighborhoodCode.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._NeighborhoodCode.Entity = Nothing
						previousValue.Properties.Remove(Me)
					End If
					Me._NeighborhoodCode.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Properties.Add(Me)
						Me._neighCondition = value.id
					Else
						Me._neighCondition = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("NeighborhoodCode")
				End If
			End Set
		End Property
		
		<Association(Name:="PropertyType_Property", Storage:="_PropertyType", ThisKey:="typeCode", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property PropertyType() As PropertyType
			Get
				Return Me._PropertyType.Entity
			End Get
			Set
				Dim previousValue As PropertyType = Me._PropertyType.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._PropertyType.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._PropertyType.Entity = Nothing
						previousValue.Properties.Remove(Me)
					End If
					Me._PropertyType.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Properties.Add(Me)
						Me._typeCode = value.id
					Else
						Me._typeCode = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("PropertyType")
				End If
			End Set
		End Property
		
		<Association(Name:="StreetType_Property", Storage:="_StreetType", ThisKey:="streetCode", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property StreetType() As StreetType
			Get
				Return Me._StreetType.Entity
			End Get
			Set
				Dim previousValue As StreetType = Me._StreetType.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._StreetType.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._StreetType.Entity = Nothing
						previousValue.Properties.Remove(Me)
					End If
					Me._StreetType.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Properties.Add(Me)
						Me._streetCode = value.id
					Else
						Me._streetCode = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("StreetType")
				End If
			End Set
		End Property
		
		<Association(Name:="SocioEconCode_Property", Storage:="_SocioEconCode", ThisKey:="socioEcon", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property SocioEconCode() As SocioEconCode
			Get
				Return Me._SocioEconCode.Entity
			End Get
			Set
				Dim previousValue As SocioEconCode = Me._SocioEconCode.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._SocioEconCode.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._SocioEconCode.Entity = Nothing
						previousValue.Properties.Remove(Me)
					End If
					Me._SocioEconCode.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Properties.Add(Me)
						Me._socioEcon = value.id
					Else
						Me._socioEcon = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("SocioEconCode")
				End If
			End Set
		End Property
		
		<Association(Name:="StreetconnCode_Property", Storage:="_StreetconnCode", ThisKey:="streetConn", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property StreetconnCode() As StreetconnCode
			Get
				Return Me._StreetconnCode.Entity
			End Get
			Set
				Dim previousValue As StreetconnCode = Me._StreetconnCode.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._StreetconnCode.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._StreetconnCode.Entity = Nothing
						previousValue.Properties.Remove(Me)
					End If
					Me._StreetconnCode.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Properties.Add(Me)
						Me._streetConn = value.id
					Else
						Me._streetConn = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("StreetconnCode")
				End If
			End Set
		End Property
		
		<Association(Name:="StreetSafteyCode_Property", Storage:="_StreetSafteyCode", ThisKey:="streetSaftey", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property StreetSafteyCode() As StreetSafteyCode
			Get
				Return Me._StreetSafteyCode.Entity
			End Get
			Set
				Dim previousValue As StreetSafteyCode = Me._StreetSafteyCode.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._StreetSafteyCode.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._StreetSafteyCode.Entity = Nothing
						previousValue.Properties.Remove(Me)
					End If
					Me._StreetSafteyCode.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Properties.Add(Me)
						Me._streetSaftey = value.id
					Else
						Me._streetSaftey = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("StreetSafteyCode")
				End If
			End Set
		End Property
		
		<Association(Name:="StreetwalkCode_Property", Storage:="_StreetwalkCode", ThisKey:="streetWalk", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property StreetwalkCode() As StreetwalkCode
			Get
				Return Me._StreetwalkCode.Entity
			End Get
			Set
				Dim previousValue As StreetwalkCode = Me._StreetwalkCode.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._StreetwalkCode.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._StreetwalkCode.Entity = Nothing
						previousValue.Properties.Remove(Me)
					End If
					Me._StreetwalkCode.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Properties.Add(Me)
						Me._streetWalk = value.id
					Else
						Me._streetWalk = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("StreetwalkCode")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Pictures(ByVal entity As Picture)
			Me.SendPropertyChanging
			entity.[Property] = Me
		End Sub
		
		Private Sub detach_Pictures(ByVal entity As Picture)
			Me.SendPropertyChanging
			entity.[Property] = Nothing
		End Sub
	End Class
End Namespace
